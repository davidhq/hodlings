// Generated by LiveScript 1.6.0
(function(){
  var ref$, map, reject, each, split, join, keys, unique, any, commander, homedir, locale, getOptions, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('prelude-ls'), map = ref$.map, reject = ref$.reject, each = ref$.each, split = ref$.split, join = ref$.join, keys = ref$.keys, unique = ref$.unique, any = ref$.any;
  commander = require('commander');
  homedir = require('homedir');
  locale = require('./locale');
  out$.getOptions = getOptions = function(){
    var parseColumnArguments, parseCurrency, options, ref$, Renderer, availableColumns, badArgs;
    parseColumnArguments = function(it){
      return unique(
      map(function(it){
        return it.toLowerCase();
      })(
      split(',')(
      it)));
    };
    parseCurrency = function(it){
      switch (false) {
      case !/^AUD|BRL|CAD|CHF|CNY|EUR|GBP|HKD|IDR|INR|JPY|KRW|MXN|RUB$/i.test(it):
        return it.toUpperCase();
      default:
        console.error("Unknown currency: " + it);
        return process.exit(-1);
      }
    };
    options = commander.option("-w, --watch", "refresh data periodically every 10 min").option("-f, --file <f>", "file to use for hodlings [~/.hodlings]", homedir() + '/.hodlings').option("-x, --convert <currency>", "currency to display (usd, eur, cny...)", parseCurrency, "USD").option("--columns <columns>", "columns to display", parseColumnArguments, []).option("--eth", "focus on eth, hide the bitcoin-specific columns (value-btc, 7-day-change-vs-btc)").option("--btc", "focus on btc, hide the ethereum-specific columns (value-eth, 7-day-change-vs-eth)").option("--locale <locale>", "locale to use for formatting [" + locale.current + "]", locale.set, locale.current).option("--supported-currencies", "shows list of supported currencies", function(){
      console.log("Supported currencies: AUD, BRL, CAD, CHF, CNY, EUR, GBP, HKD, IDR, INR, JPY, KRW, MXN, RUB");
      return process.exit(0);
    }).option("--supported-locales", "shows list of supported locales", function(){
      console.log("Supported locales:");
      each(console.log)(
      locale.getSupported());
      return process.exit(0);
    }).option("--available-columns", "shows list of columns").option("--no-color", "don't display colors").parse(process.argv);
    ref$ = require("./render-table"), Renderer = ref$.Renderer, availableColumns = ref$.availableColumns;
    options.Renderer = Renderer;
    if (options.availableColumns) {
      console.log("Supported columns:");
      console.log(
      join(", ")(
      keys(
      availableColumns)));
      process.exit(0);
    }
    if (options.columns.length === 0 || any((function(it){
      return it === 'all';
    }))(
    options.columns)) {
      options.columns = keys(
      availableColumns);
      if (options.btc) {
        options.columns = reject(function(it){
          return it === "value-eth" || it === "7-day-change-vs-eth";
        })(
        options.columns);
      }
      if (options.eth) {
        options.columns = reject(function(it){
          return it === "value-btc" || it === "7-day-change-vs-btc";
        })(
        options.columns);
      }
    } else {
      badArgs = reject(function(it){
        return it in availableColumns;
      })(
      options.columns);
      if (badArgs.length) {
        each(function(it){
          return console.error("Unknown column name: " + it);
        })(
        badArgs);
        process.exit(-1);
      }
    }
    return options;
  };
}).call(this);
