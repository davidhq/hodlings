// Generated by LiveScript 1.6.0
(function(){
  var chalk, locale, ref$, flip, map, sortBy, reverse, join, table, getBorderCharacters, generateTable, style, upDownStyle, availableColumns, Renderer, out$ = typeof exports != 'undefined' && exports || this;
  chalk = require('chalk');
  locale = require('./locale');
  ref$ = require('prelude-ls'), flip = ref$.flip, map = ref$.map, sortBy = ref$.sortBy, reverse = ref$.reverse, join = ref$.join;
  ref$ = require('table'), table = ref$.table, getBorderCharacters = ref$.getBorderCharacters;
  generateTable = flip(table)({
    border: getBorderCharacters('void'),
    drawHorizontalLine: function(){},
    columnDefault: {
      alignment: 'right',
      paddingLeft: 0,
      paddingRight: 2
    },
    columns: {
      0: {
        alignment: 'left'
      }
    }
  });
  style = {
    header: chalk.white.bold.underline,
    date: chalk.white.dim,
    totalLabel: chalk.white.bold,
    totalValue: chalk.yellow.bold,
    footerValue: chalk.blue.bold
  };
  upDownStyle = curry$(function(value, formatted){
    switch (false) {
    case !(value > 0):
      return chalk.green(formatted);
    case !(value < 0):
      return chalk.red(formatted);
    default:
      return chalk.white.dim(formatted);
    }
  });
  availableColumns = {
    name: {
      display: '',
      style: chalk.cyan,
      contents: function(it){
        return it.currency.name;
      }
    },
    value: {
      display: 'Value',
      style: chalk.blue.bold,
      contents: function(it){
        return it.value;
      },
      formatter: 'currency'
    },
    price: {
      display: 'Price',
      style: chalk.magenta,
      contents: function(it){
        return it.price;
      },
      formatter: 'currency'
    },
    change: {
      display: 'Change',
      conditionalStyle: upDownStyle,
      contents: function(it){
        return it.changeVsUsd;
      },
      formatter: 'percent'
    },
    percentage: {
      display: 'Pct',
      style: chalk.cyan.dim,
      contents: function(it){
        return it.percentage;
      },
      formatter: 'percent'
    },
    "1-hour-change": {
      display: '1H',
      conditionalStyle: upDownStyle,
      contents: function(it){
        return parseFloat(it.currency.percent_change_1h) / 100;
      },
      formatter: 'percent'
    },
    "24-hour-change": {
      display: '24H',
      conditionalStyle: upDownStyle,
      contents: function(it){
        return parseFloat(it.currency.percent_change_24h) / 100;
      },
      formatter: 'percent'
    },
    "7-day-change": {
      display: '7D',
      conditionalStyle: upDownStyle,
      contents: function(it){
        return parseFloat(it.currency.percent_change_7d) / 100;
      },
      formatter: 'percent'
    },
    count: {
      display: 'Count',
      style: chalk.white,
      contents: function(it){
        return it.count;
      },
      formatter: 'number'
    },
    symbol: {
      display: 'Symbol',
      style: chalk.white,
      contents: function(it){
        return it.symbol;
      }
    },
    "value-eth": {
      display: 'Value ETH',
      style: chalk.yellow,
      contents: function(it){
        return it.valueEth;
      },
      formatter: 'number'
    },
    "7-day-change-vs-eth": {
      display: '7DVsETH',
      conditionalStyle: upDownStyle,
      contents: function(it){
        return it.changeWeekVsEth;
      },
      formatter: 'percent'
    },
    "value-btc": {
      display: 'Value BTC',
      style: chalk.yellow,
      contents: function(it){
        return it.valueBtc;
      },
      formatter: 'number'
    },
    "7-day-change-vs-btc": {
      display: '7DVsBTC',
      conditionalStyle: upDownStyle,
      contents: function(it){
        return it.changeWeekVsBtc;
      },
      formatter: 'percent'
    },
    "volume-24h": {
      display: "Vol24hVsBTC",
      style: chalk.magenta.dim,
      contents: function(it){
        return it.volume;
      },
      formatter: 'percent'
    },
    rank: {
      display: 'Rank',
      style: chalk.white,
      contents: function(it){
        return it.rank;
      }
    },
    "market-cap": {
      display: 'Cap (M)',
      style: chalk.cyan.dim,
      contents: function(it){
        return it.marketCap;
      },
      formatter: 'bigcurrency'
    }
  };
  out$.availableColumns = availableColumns;
  out$.Renderer = Renderer = (function(){
    Renderer.displayName = 'Renderer';
    var prototype = Renderer.prototype, constructor = Renderer;
    function Renderer(options){
      var ref$;
      this.options = options;
      this._addFooter = curry$(prototype.addFooter, true);
      this.addFooter = bind$(this, '_addFooter');
      this.render = bind$(this, 'render', prototype);
      this.format = bind$(this, 'format', prototype);
      this.options.columns = (function(){
        var ref$;
        switch (false) {
        case !((ref$ = this.options.columns) != null && ref$.length):
          return this.options.columns;
        case !this.options.valueOnly:
          return ['symbol', 'value'];
        default:
          return ['name', 'value', '1-hour-change', '24-hour-change', '7-day-change', 'percentage'];
        }
      }.call(this));
      if (this.options.symbol) {
        this.options.columns = map(function(it){
          switch (it) {
          case 'name':
            return 'symbol';
          default:
            return it;
          }
        })(
        this.options.columns);
      }
      if (this.options.showCount) {
        if (!in$('count', this.options.columns)) {
          this.options.columns.push('count');
        }
      }
      this.formatters = locale.getFormatters(this.options.convert, ((ref$ = this.options.columns) != null ? ref$[0] : void 8) === 'symbol');
    }
    Renderer.prototype.format = function(details){
      var columnData, data, this$ = this;
      columnData = map(function(it){
        return availableColumns[it];
      })(
      this.options.columns);
      data = map(function(detail){
        return map(function(it){
          var value, style, that, ref$;
          value = it.contents(
          detail);
          style = (function(){
            switch (false) {
            case (that = it.style) == null:
              return that;
            case (that = it.conditionalStyle) == null:
              return that(
              value);
            default:
              return id;
            }
          }());
          return style(
          this$.formatters[(ref$ = it.formatter) != null ? ref$ : 'default'](
          value));
        })(
        columnData);
      })(
      reverse(
      sortBy(function(it){
        return it.value;
      })(
      details)));
      if (!(this.options.valueOnly || this.options.hideHeader)) {
        data.unshift(
        map(style.header)(
        map(function(it){
          return it.display;
        })(
        columnData)));
      }
      return data;
    };
    Renderer.prototype.addFooter = function(portfolio, previous){
      var marketCapKey, totalFx, totalEth, totalBtc, footer;
      marketCapKey = "total_market_cap_" + this.options.convert.toLowerCase();
      totalFx = style.totalValue(
      this.formatters.currency(
      portfolio.grandTotal));
      if (!isNaN(portfolio.totalsChange.fx) && portfolio.totalsChange.fx !== 0) {
        totalFx += " " + upDownStyle(portfolio.totalsChange.fx)(
        this.formatters.percent(
        portfolio.totalsChange.fx));
        totalFx += style.date(
        " (" + this.formatters.currency(
        portfolio.totalsChange.fxDiff) + ")");
      }
      totalEth = style.totalValue(
      this.formatters.number(
      portfolio.grandTotalEth));
      if (!isNaN(portfolio.totalsChange.eth) && portfolio.totalsChange.eth !== 0) {
        totalEth += " " + upDownStyle(portfolio.totalsChange.eth)(
        this.formatters.percent(
        portfolio.totalsChange.eth));
      }
      totalBtc = style.totalValue(
      this.formatters.number(
      portfolio.grandTotalBtc));
      if (!isNaN(portfolio.totalsChange.btc) && portfolio.totalsChange.btc !== 0) {
        totalBtc += " " + upDownStyle(portfolio.totalsChange.btc)(
        this.formatters.percent(
        portfolio.totalsChange.btc));
      }
      footer = [
        [style.totalLabel('Total:'), totalFx], [style.totalLabel("ETH:"), totalEth], [style.totalLabel("BTC:"), totalBtc], [
          style.totalLabel("Cap Total (M):"), style.footerValue(
          this.formatters.bigcurrency(
          portfolio.global[marketCapKey]))
        ], [
          style.totalLabel("ETH:"), style.footerValue(
          this.formatters.percent(
          portfolio.ethereum_percentage_of_market_cap / 100))
        ], [
          style.totalLabel("BTC:"), style.footerValue(
          this.formatters.percent(
          portfolio.global.bitcoin_percentage_of_market_cap / 100))
        ], [
          style.totalLabel("Flippening:"), style.footerValue(
          this.formatters.percent(
          portfolio.flippening))
        ], [style.date(
        this.formatters.time(
        new Date()))], [style.date(
        "Help: -h")]
      ];
      return previous + join(" / ")(
      map(join(" "))(
      footer));
    };
    Renderer.prototype.render = function(portfolio){
      return this.addFooter(portfolio)(
      generateTable(
      this.format(
      portfolio.details)));
    };
    return Renderer;
  }());
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
