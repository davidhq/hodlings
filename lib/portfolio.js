// Generated by LiveScript 1.6.0
(function(){
  var chalk, locale, ref$, writeFileSync, readFileSync, existsSync, lines, map, split, filter, groupBy, objToPairs, sum, Obj, path, homedir, objMap, out$ = typeof exports != 'undefined' && exports || this;
  chalk = require('chalk');
  locale = require('./locale');
  ref$ = require('fs'), writeFileSync = ref$.writeFileSync, readFileSync = ref$.readFileSync, existsSync = ref$.existsSync;
  ref$ = require('prelude-ls'), lines = ref$.lines, map = ref$.map, split = ref$.split, filter = ref$.filter, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, sum = ref$.sum, Obj = ref$.Obj;
  path = require('path');
  homedir = require('homedir');
  objMap = Obj.map;
  ref$ = out$;
  ref$.ensureMainExists = function(){
    var hodlingsFile, sourceFile;
    hodlingsFile = path.join(homedir(), ".hodlings");
    if (!existsSync(hodlingsFile)) {
      sourceFile = path.join(__dirname, '../.hodlings-example');
      writeFileSync(hodlingsFile, readFileSync(sourceFile));
      console.log(chalk.magenta("\nFile " + hodlingsFile + " not found, creating sample file..."));
      return console.log(chalk.green("Please edit it with your actual portfolio!\n"));
    }
  };
  ref$.load = function(file){
    return map(function(it){
      return {
        coin: it[0],
        amount: it[1]
      };
    })(
    objToPairs(
    objMap(function(it){
      return sum(
      map(locale.getParser())(
      map(function(it){
        return it[1];
      })(
      it)));
    })(
    groupBy(function(it){
      return it[0];
    })(
    filter(function(it){
      return it[1] != null;
    })(
    map(map(function(it){
      return it.trim();
    }))(
    map(split(":"))(
    map(function(it){
      return it[0];
    })(
    map(split("#"))(
    lines(
    readFileSync(file, 'utf8')))))))))));
  };
}).call(this);
