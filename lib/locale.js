// Generated by LiveScript 1.6.0
(function(){
  var globalize, cldrData, ref$, Func, head, tail, groupBy, objToPairs, map, filter, join, id, memoize, getLocaleWithFallback, currentLocale, ref1$, ref2$, ref3$, localeChecker, out$ = typeof exports != 'undefined' && exports || this;
  globalize = require('globalize');
  cldrData = require('cldr-data');
  ref$ = require('prelude-ls'), Func = ref$.Func, head = ref$.head, tail = ref$.tail, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, map = ref$.map, filter = ref$.filter, join = ref$.join, id = ref$.id;
  memoize = Func.memoize;
  globalize.load(cldrData.entireSupplemental());
  getLocaleWithFallback = function(locale){
    return head(
    filter(function(it){
      var ref$;
      return (ref$ = it.toLowerCase()) === locale.toLowerCase() || ref$ === locale.split('-')[0].toLowerCase();
    })(
    cldrData.availableLocales));
  };
  currentLocale = getLocaleWithFallback(
  (ref$ = (ref1$ = process.env.LANG) != null ? (ref2$ = ref1$.split('.')) != null ? (ref3$ = ref2$[0]) != null ? ref3$.replace('_', '-') : void 8 : void 8 : void 8) != null ? ref$ : 'en');
  globalize.load(cldrData.entireMainFor(currentLocale));
  localeChecker = function(arg){
    var locale, that;
    locale = getLocaleWithFallback(arg);
    if ((that = locale) != null) {
      return that;
    } else {
      console.log("Unknown locale " + arg + ". Defaulting to " + currentLocale + ".");
      return currentLocale;
    }
  };
  ref$ = out$;
  ref$.current = currentLocale;
  ref$.set = function(it){
    currentLocale = localeChecker(it);
    return globalize.load(cldrData.entireMainFor(currentLocale));
  };
  ref$.getSupported = memoize(function(){
    return map(function(it){
      return head(it) + ": " + join(', ')(
      tail(
      it));
    })(
    objToPairs(
    groupBy(function(it){
      return head(
      it.split('-'));
    })(
    cldrData.availableLocales)));
  });
  ref$.getParser = function(){
    return globalize(currentLocale).numberParser();
  };
  ref$.getFormatters = function(currency, shortForm){
    var globalizeLocale, timeFormat, bigNumberFormatter, numberFormatter;
    globalizeLocale = globalize(currentLocale);
    timeFormat = (function(){
      switch (false) {
      case !shortForm:
        return {
          skeleton: 'Hm'
        };
      default:
        return {
          time: 'medium'
        };
      }
    }());
    bigNumberFormatter = globalizeLocale.numberFormatter({
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    });
    numberFormatter = globalizeLocale.numberFormatter({
      minimumFractionDigits: 0,
      maximumFractionDigits: 4
    });
    return {
      bigcurrency: function(it){
        return globalizeLocale.formatCurrency(it / 1e6, currency, {
          useGrouping: true,
          maximumFractionDigits: 0
        });
      },
      currency: globalizeLocale.currencyFormatter(currency, {
        useGrouping: true
      }),
      number: function(value){
        switch (false) {
        case !(value > 1e7):
          return bigNumberFormatter(value / 1e6) + " m";
        case !(value > 1e4):
          return bigNumberFormatter(value / 1e3) + " k";
        default:
          return numberFormatter(value);
        }
      },
      percent: globalizeLocale.numberFormatter({
        style: 'percent',
        maximumFractionDigits: 2,
        minimumFractionDigits: 2
      }),
      time: globalizeLocale.dateFormatter(timeFormat),
      'default': id,
      parser: globalizeLocale.numberParser()
    };
  };
}).call(this);
